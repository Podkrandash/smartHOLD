import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler, CallbackQueryHandler

import config
import db
import solana_utils
from solders.pubkey import Pubkey
import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
WALLET_CONNECT = 1
LOCK_AMOUNT = 2

# --- –§—É–Ω–∫—Ü–∏–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    user = update.effective_user
    db.init_db() # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ë–î –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
    
    wallet_address = db.get_wallet(user.id)
    
    if wallet_address:
        text = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}! –í–∞—à –∫–æ—à–µ–ª–µ–∫ {wallet_address[:6]}...{wallet_address[-4:]} —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω."
        keyboard = [
            [KeyboardButton("üîí –ó–∞–º–æ—Ä–æ–∑–∏—Ç—å —Ç–æ–∫–µ–Ω—ã")],
            [KeyboardButton("üìä –ú–æ–∏ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã")],
            [KeyboardButton("üí∞ –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É")],
        ]
    else:
        text = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –≤–∞—à –∫–æ—à–µ–ª–µ–∫ Solana."
        keyboard = [
            [KeyboardButton("üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫")],
        ]
        
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(text, reply_markup=reply_markup)


async def connect_wallet_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞."""
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ Solana."
    )
    return WALLET_CONNECT

async def connect_wallet_save(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞."""
    wallet_address = update.message.text.strip()
    user_id = update.effective_user.id

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞ Solana
    try:
        _ = Pubkey.from_string(wallet_address)
    except Exception:
        await update.message.reply_text("–ü–æ—Ö–æ–∂–µ, —ç—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å Solana. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return WALLET_CONNECT

    db.link_wallet(user_id, wallet_address)

    await update.message.reply_text(
        f"–í–∞—à –∫–æ—à–µ–ª–µ–∫ {wallet_address} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!"
    )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await start(update, context)
    return ConversationHandler.END


async def lock_tokens_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –∑–∞–º–æ—Ä–æ–∑–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤, –∑–∞–ø—Ä–∞—à–∏–≤–∞—è —Å—É–º–º—É."""
    user_id = update.effective_user.id
    wallet_address = db.get_wallet(user_id)

    if not wallet_address:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫.")
        return ConversationHandler.END

    try:
        user_pubkey = Pubkey.from_string(wallet_address)
        balance = await solana_utils.get_token_balance(user_pubkey)
        
        # TODO: –£—á–µ—Å—Ç—å decimals
        await update.message.reply_text(
            f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance} SDCB.\n\n"
            "–°–∫–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–º–æ—Ä–æ–∑–∏—Ç—å? –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É —á–∏—Å–ª–æ–º."
        )
        return LOCK_AMOUNT

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è {wallet_address}: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END


async def get_lock_amount(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—É–º–º—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∏."""
    user_id = update.effective_user.id
    wallet_address = db.get_wallet(user_id)
    
    DECIMALS = 9  # TODO: –ø–æ–ª—É—á–∏—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏

    try:
        ui_amount = float(update.message.text.replace(',', '.'))
        if ui_amount <= 0:
            raise ValueError
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100.5).")
        return LOCK_AMOUNT

    raw_amount = int(ui_amount * 10**DECIMALS)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    user_pubkey = Pubkey.from_string(wallet_address)
    balance = await solana_utils.get_token_balance(user_pubkey)
    if raw_amount > balance:
        await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –º–µ–Ω—å—à–µ.")
        return LOCK_AMOUNT
    
    # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –ø—É–±–ª–∏—á–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞, –∫–æ–≥–¥–∞ –æ–Ω –±—É–¥–µ—Ç
    base_url = "http://127.0.0.1:8000" 
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    import urllib.parse
    params = urllib.parse.urlencode({
        "tg_id": user_id,
        "user_wallet": wallet_address,
        "amount": raw_amount
    })
    sign_url = f"{base_url}/?{params}"

    keyboard = [
        [InlineKeyboardButton("‚úçÔ∏è –ü–æ–¥–ø–∏—Å–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é", url=sign_url)]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –ø–æ–¥–ø–∏—Å–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –≤–∞—à–µ–º –∫–æ—à–µ–ª—å–∫–µ.",
        reply_markup=reply_markup
    )
    
    return ConversationHandler.END


async def show_locked_tokens(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ú–æ–∏ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã'."""
    user_id = update.effective_user.id
    wallet_address = db.get_wallet(user_id)

    if not wallet_address:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫.")
        return

    try:
        user_pubkey = Pubkey.from_string(wallet_address)
        lock_pda, _ = solana_utils.get_lock_pda(user_pubkey)
        
        lock_details = await solana_utils.get_lock_details(lock_pda)

        if lock_details and lock_details.is_initialized:
            lock_date = datetime.datetime.fromtimestamp(lock_details.lock_date).strftime('%Y-%m-%d %H:%M:%S')
            unlock_date = datetime.datetime.fromtimestamp(lock_details.unlock_date).strftime('%Y-%m-%d %H:%M:%S')
            amount = lock_details.amount_locked # TODO: –£—á–µ—Å—Ç—å decimals

            text = (
                f"‚úÖ **–í–∞—à–∏ —Ç–æ–∫–µ–Ω—ã –∑–∞–º–æ—Ä–æ–∂–µ–Ω—ã**\n\n"
                f"üî¢ **–°—É–º–º–∞:** {amount} SDCB\n"
                f"üóìÔ∏è **–î–∞—Ç–∞ –∑–∞–º–æ—Ä–æ–∑–∫–∏:** {lock_date}\n"
                f"‚è≥ **–î–∞—Ç–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:** {unlock_date}\n\n"
                f"–ù–∞–≥—Ä–∞–¥—ã –∑–∞ —Å—Ç–µ–π–∫–∏–Ω–≥ –±—É–¥—É—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ."
            )
        else:
            text = "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤."

        await update.message.reply_text(text, parse_mode='Markdown')

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –¥–ª—è {wallet_address}: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ.")

async def unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã.")


async def claim_rewards(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É'."""
    user_id = update.effective_user.id
    wallet_address = db.get_wallet(user_id)

    if not wallet_address:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫.")
        return

    try:
        user_pubkey = Pubkey.from_string(wallet_address)
        lock_pda, _ = solana_utils.get_lock_pda(user_pubkey)
        
        lock_details = await solana_utils.get_lock_details(lock_pda)

        if not lock_details or not lock_details.is_initialized:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã
        import time
        current_time = int(time.time())
        end_date = min(current_time, lock_details.unlock_date)
        days_elapsed = (end_date - lock_details.last_reward_claim_date) // 86400
        
        if days_elapsed <= 0:
            await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥. –ù–∞–≥—Ä–∞–¥—ã –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ.")
            return
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã
        rewards = (lock_details.amount_locked * days_elapsed) // 1000  # 0.1% –≤ –¥–µ–Ω—å
        rewards_display = rewards / 10**9
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
        base_url = "http://127.0.0.1:8000"
        
        import urllib.parse
        params = urllib.parse.urlencode({
            "tg_id": user_id,
            "user_wallet": wallet_address,
            "action": "claim"
        })
        sign_url = f"{base_url}/claim?{params}"

        keyboard = [
            [InlineKeyboardButton("üí∞ –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—ã", url=sign_url)]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã: ~{rewards_display:.2f} SDCB –∑–∞ {days_elapsed} –¥–Ω–µ–π.\n\n"
            "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥.",
            reply_markup=reply_markup
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –Ω–∞–≥—Ä–∞–¥ –¥–ª—è {wallet_address}: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –Ω–∞–≥—Ä–∞–¥.")


def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    application = Application.builder().token(config.TELEGRAM_TOKEN).build()
    
    # –î–∏–∞–ª–æ–≥ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞
    wallet_conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫$'), connect_wallet_prompt)],
        states={
            WALLET_CONNECT: [MessageHandler(filters.TEXT & ~filters.COMMAND, connect_wallet_save)],
        },
        fallbacks=[CommandHandler('start', start)],
    )

    # –î–∏–∞–ª–æ–≥ –¥–ª—è –∑–∞–º–æ—Ä–æ–∑–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤
    lock_conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^üîí –ó–∞–º–æ—Ä–æ–∑–∏—Ç—å —Ç–æ–∫–µ–Ω—ã$'), lock_tokens_start)],
        states={
            LOCK_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_lock_amount)],
        },
        fallbacks=[CommandHandler('start', start)],
    )
    
    application.add_handler(wallet_conv_handler)
    application.add_handler(lock_conv_handler)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.Regex('^üìä –ú–æ–∏ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã$'), show_locked_tokens))
    application.add_handler(MessageHandler(filters.Regex('^üí∞ –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É$'), claim_rewards))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    application.add_handler(MessageHandler(filters.COMMAND, unknown_command))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()


if __name__ == "__main__":
    main() 